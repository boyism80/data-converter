{{~
func containable(table)
    ret table.name == table.json
end
~}}
    public class ContainerConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            return false;
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var token = JToken.Load(reader);
            var result = Activator.CreateInstance(objectType) as Container;
            result.Load(token.ToString());

            return result;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new NotImplementedException();
        }
    }

    [JsonConverter(typeof(ContainerConverter))]
    public abstract class Container
    {
        public class HookFuncs<T>
        {
            public Func<JToken, T> Build { get; set; }
            public Action<T> Built { get; set; }
        }

        public abstract void Load();
        public abstract void Load(string json);
    }

    public class KeyValueContainer<K, V> : Container, IReadOnlyDictionary<K, V> where V : class
    {
        private readonly Dictionary<K, V> _raw = new Dictionary<K, V>();

        public HookFuncs<V> Hook { get; private set; } = new HookFuncs<V>();

        public override void Load()
        {
            var attr = GetType().GetCustomAttribute<TableAttribute>(true);
            Load(File.ReadAllText(attr.Path));
        }

        public override void Load(string json)
        {
            foreach (var (key, value) in JObject.Parse(json))
            {
                var obj = Hook.Build?.Invoke(value) ?? value.ToObject<V>();
                _raw.Add(new JValue(key).ToObject<K>(), obj);

                if (Hook.Built != null)
                    Hook.Built.Invoke(obj);
            }
        }

        public V this[K key] => _raw.TryGetValue(key, out var value) ? value : default;

        public IEnumerable<K> Keys => _raw.Keys;

        public IEnumerable<V> Values => _raw.Values;

        public int Count => _raw.Count;

        public bool ContainsKey(K key) => _raw.ContainsKey(key);

        public IEnumerator<KeyValuePair<K, V>> GetEnumerator() => _raw.GetEnumerator();

        public bool TryGetValue(K key, [MaybeNullWhen(false)] out V value) => _raw.TryGetValue(key, out value);

        IEnumerator IEnumerable.GetEnumerator() => _raw.GetEnumerator();
    }

    public class ArrayContainer<T> : Container, IReadOnlyList<T> where T : class
    {
        private readonly List<T> _raw = new List<T>();

        public HookFuncs<T> Hook { get; private set; } = new HookFuncs<T>();

        public override void Load()
        {
            var attr = GetType().GetCustomAttribute<TableAttribute>(true);
            Load(File.ReadAllText(attr.Path));
        }

        public override void Load(string json)
        {
            foreach (var value in JArray.Parse(json))
            {
                var obj = Hook.Build?.Invoke(value) ?? value.ToObject<T>();
                _raw.Add(obj);
                Hook.Built?.Invoke(obj);
            }
        }

        public T this[int index] => _raw.ElementAtOrDefault(index);

        public int Count => _raw.Count;

        public IEnumerator<T> GetEnumerator() => _raw.GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator() => _raw.GetEnumerator();
    }

    public class TableAttribute : Attribute
    {
        public string Path { get; private set; }

        public TableAttribute(string path)
        {
            Path = path;
        }
    }

    public class Model
    {
{{~ for table in tables | array.filter @containable ~}}
        [Table("{{ config.json_file_path }}/{{ table.name }}.json")]
        public partial class {{ table.name | @upper_camel }}Table : {{ table.type }}<{{ table.generic }}>
        { }
        public {{ table.name | @upper_camel }}Table {{ table.name | @upper_camel }} { get; private set; } = new {{ table.name | @upper_camel }}Table();
{{~ end ~}}

        public Container[] Containers { get; private set; }

        public Model()
        {
            Containers = new Container[]
            {
{{~ for table in tables | array.filter @containable ~}}
                {{ table.name | @upper_camel }}{{ if !for.last }}, {{ end }}
{{~ end ~}}
            };
        }
    }